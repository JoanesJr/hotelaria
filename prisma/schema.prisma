// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  surname        String
  email          String           @unique
  cpf            String           @unique
  rg             String           @unique
  birthday       DateTime
  password_hash  String
  active         Boolean          @default(true)
  address        Address          @relation(fields: [address_id], references: [id])
  address_id     String
  privilege      Privilege        @relation(fields: [privilege_id], references: [id])
  privilege_id   String
  Comments       Comments[]
  AnswerComments AnswerComments[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())

  UserCourses UserCourses[]
  Signatures  Signatures[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  streeth    String
  number     Int
  neighboor  String
  complement String
  reference  String
  User       User[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("address")
}

model Privilege {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  User       User[]

  @@map("privilege")
}

model Courses {
  id          String           @id @default(uuid())
  name        String           @unique
  price       Float
  trailer     String?
  capa        String?
  active      Boolean          @default(false)
  category    CourseCategories @relation(fields: [category_id], references: [id])
  category_id String
  modules     ModulesCourses[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now())
  UserCourses UserCourses[]

  @@map("courses")
}

model CourseCategories {
  id         String    @id @default(uuid())
  name       String    @unique
  active     Boolean   @default(true)
  Course     Courses[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@map("courses_categories")
}

model ModulesCourses {
  id         String         @id @default(uuid())
  name       String         @unique
  active     Boolean
  image      String?
  Course     Courses[]
  Classes    ClassCourses[]
  created_at DateTime       @default(now())
  updated_at DateTime       @default(now())

  @@map("modules_courses")
}

model ClassCourses {
  id             String           @id @default(uuid())
  name           String
  url            String?
  active         Boolean
  attachment     Attachments[]
  ModulesCourses ModulesCourses[]
  Comments       Comments[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())

  @@map("class_courses")
}

model Attachments {
  id           String         @id @default(uuid())
  name         String
  url          String?
  ClassCourses ClassCourses[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())

  @@map("attchments")
}

model Comments {
  id         String           @id @default(uuid())
  message    String
  aula       ClassCourses     @relation(fields: [aulaid], references: [id])
  aulaid     String
  user       User             @relation(fields: [userid], references: [id])
  userid     String
  answer     AnswerComments[]
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())

  @@map("comments")
}

model AnswerComments {
  id         String     @id @default(uuid())
  message    String
  user       User       @relation(fields: [userid], references: [id])
  userid     String
  Comments   Comments[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  @@map("answer_comments")
}

model UserCourses {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userid], references: [id])
  userid      String
  initialDate DateTime
  expireDate  DateTime
  course      Courses  @relation(fields: [courseid], references: [id])
  courseid    String

  @@map("user_course")
}

model Plains {
  id              String   @id @default(uuid())
  name            String
  price_vista     Float
  price_parcelado Float
  active          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
}

model Signatures {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  created_at DateTime       @default(now())
  status     StatusPurchase @relation(fields: [statusId], references: [id])
  statusId   String
  expiresIn  DateTime
}

model StatusPurchase {
  id         String       @id @default(uuid())
  name       String       @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  Signatures Signatures[]

  @@map("status_purchase")
}
