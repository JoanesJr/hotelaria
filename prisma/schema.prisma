// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  cpf           String        @unique
  birthday      DateTime
  password_hash String
  privilege     String        @default("basic")
  maritalStatus String        @default("solteiro")
  cardCar       String        @default("")
  created_at    DateTime      @default(now())
  Address       Address[]
  Reservation   Reservation[]

  @@map("users")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  neighborhood String
  cep          String
  id_user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  created_at   DateTime @default(now())

  @@map("address")
}

model TypeRoom {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  Room       Room[]

  @@map("type_room")
}

model Room {
  id          String        @id @default(uuid())
  name        String
  info        String
  status      String        @default("aberto")
  typeRoom_id TypeRoom      @relation(fields: [typeRoomId], references: [id], onDelete: Cascade)
  typeRoomId  String
  created_at  DateTime      @default(now())
  Reservation Reservation[]

  @@map("room")
}

model Item {
  id          String        @id @default(uuid())
  name        String        @unique
  info        String
  price       Float
  url         String?
  created_at  DateTime      @default(now())
  accountId   String?
  AccountItem AccountItem[]

  @@map("item")
}

model Reservation {
  id         String    @id @default(uuid())
  user_id    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  room_id    Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     String
  entryDate  DateTime
  exitDate   DateTime
  status     String
  created_at DateTime  @default(now())
  CheckIn    CheckIn[]
  CheckOut   CheckOut?

  @@map("reservation")
}

model CheckIn {
  id             String      @id @default(uuid())
  id_reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId  String      @unique
  Account        Account[]

  @@map("checkin")
}

model CheckOut {
  id             String      @id @default(uuid())
  id_reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId  String      @unique

  @@map("checkout")
}

model Parameters {
  id               String @id @default(uuid())
  email            String
  password         String
  maxReserve       Int
  maxDaysOfReserve Int

  @@map("parameters")
}

model Account {
  id         String        @id @default(uuid())
  id_checkin CheckIn       @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  checkInId  String        @unique
  items      AccountItem[]
  roomValue  Float
  status     String
  total      Float?
  creted_at  DateTime      @default(now())

  @@map("account")
}

model AccountItem {
  id        String   @id @default(uuid())
  item_id   Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  value     Float
  Account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String?

  @@map("account_item")
}
