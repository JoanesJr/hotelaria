// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  cpf           String        @unique
  birthday      DateTime
  password_hash String
  privilege     String        @default("basic")
  maritalStatus String        @default("solteiro")
  cardCar       String        @default("")
  created_at    DateTime      @default(now())
  Address       Address[]
  Reservation   Reservation[]

  @@map("users")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  neighborhood String
  cep          String
  id_user      User     @relation(fields: [userId], references: [id])
  userId       String
  created_at   DateTime @default(now())

  @@map("address")
}

model TypeRoom {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  Room       Room[]

  @@map("type_room")
}

model Room {
  id          String        @id @default(uuid())
  name        String
  info        String
  status      String        @default("aberto")
  typeRoom_id TypeRoom      @relation(fields: [typeRoomId], references: [id])
  typeRoomId  String
  created_at  DateTime      @default(now())
  Reservation Reservation[]

  @@map("room")
}

model Item {
  id         String   @id @default(uuid())
  name       String   @unique
  info       String
  price      Float
  url        String?
  created_at DateTime @default(now())

  @@map("item")
}

model Reservation {
  id         String    @id @default(uuid())
  user_id    User      @relation(fields: [userId], references: [id])
  userId     String
  room_id    Room      @relation(fields: [roomId], references: [id])
  roomId     String
  entryDate  DateTime
  exitDate   DateTime
  status     String
  created_at DateTime  @default(now())
  CheckIn    CheckIn[]
  CheckOut   CheckOut?
}

model CheckIn {
  id             String      @id @default(uuid())
  id_reservation Reservation @relation(fields: [reservationId], references: [id])
  reservationId  String      @unique
}

model CheckOut {
  id             String      @id @default(uuid())
  id_reservation Reservation @relation(fields: [reservationId], references: [id])
  reservationId  String      @unique
}
